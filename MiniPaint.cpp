#include <iostream>
#include <cstdio>
#include <vector>
#include <cassert>
#include <sstream>
#include <set>
#include <unordered_map>
#include <map>
#include <algorithm>
#include <time.h>
using namespace std;
#define SIZEOFSTRINGARRAY(s) sizeof(s)/sizeof(s[0])
/* https://www.topcoder.com/stat?c=problem_statement&pm=1996&rd=4710 */

class MiniPaint
{
private:
	int getMisPaints(string str, int strokes);
public:
	int leastBad(vector<string> picture, int maxStrokes);
};

int MiniPaint::getMisPaints(string str, int strokes)
{
	if (strokes == 0) return str.length();
	int c = str[0];
	int i = 1;
	int len = str.length();
	int misMatch = 0;
	for (i = 1; i < len; ++i)
	{
		if (str[i] != c)
		{
			if (strokes > 1)
				return getMisPaints(str.substr(i, len - i), strokes - 1);
			++misMatch;
		}
	}

	return misMatch;
}

int MiniPaint::leastBad(vector<string> picture, int maxStrokes)
{
	int size = picture.size();
	vector< vector<int> > dp(size, vector<int> (maxStrokes + 1) );
	string s = picture[0];
	int totalMis = 0;
	for (int i = 0; i < size; ++i)
	{
		dp[i][0] = picture[i].length();
		totalMis += dp[i][0];
	}
	if (maxStrokes == 0)
	{
		return totalMis;
	}
	for (int i = 0; i < size; ++i)
	{
		for (int j = 1; j <= maxStrokes; ++j)
		{
			dp[i][j] = INT_MAX;
			for (int k = 1; k <= j; ++k)
			{
				int mis = getMisPaints(picture[i], k);

				dp[i][j] = std::min(dp[i][j], mis + (i >= 1 ? dp[i - 1][j - k] : 0));
			}
		}
	}
	return dp[size-1][maxStrokes];
}

void TEST(vector<string> picture, int maxStrokes, int expected)
{
	clock_t start, end;
	double cpu_time_used;

	start = clock();
	MiniPaint miniPaint;

	int result = miniPaint.leastBad(picture, maxStrokes);
	
	assert( result == expected );

	end = clock();
	cpu_time_used = ((double) (end - start));
	cout<<"Time taken : "<<cpu_time_used<<endl;
}

vector< vector<int> > convert(string *list, int n)
{
	vector< vector<int> > ret(n, vector<int> (n));

	for (int i = 0; i< n; ++i)
	{
		string str = list[i];

		for (int j = 0, len = str.length(); j < len; ++j) {
			istringstream iss(str.substr(j,1));

			iss >> ret[i][j];
		}
	}

	return ret;
}

vector<string> convertEx(string *list, int n)
{
	vector<string> ret;

	for (int i = 0; i< n; ++i)
	{
		ret.push_back(list[i]);
	}

	return ret;
}

void Test1()
{
	string test[]= {
"BBBBBBBBBBBBBBB",
"WWWWWWWWWWWWWWW",
"WWWWWWWWWWWWWWW",
"WWWWWBBBBBWWWWW"};

TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 4, 5);
}

void Test2()
{
	string test[]= {
"BBBBBBBBBBBBBBB",
"WWWWWWWWWWWWWWW",
"WWWWWWWWWWWWWWW",
"WWWWWBBBBBWWWWW"};

TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 6, 0);
}

void Test3()
{
	string test[]= {
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW",
"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBW"};

//TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 100, 40);
}

void Test4()
{
	string test[]= {
"BBBBBBBBBBBBBBB",
"WWWWWWWWWWWWWWW",
"WWWWWWWWWWWWWWW",
"WWWWWBBBBBWWWWW"};

TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 0, 60);
}

void Test5()
{
	string test[]= {"BBBWWWWBWWWWBBWWWBWWWBWBWBBBWWWWBWWBWBWBWWBBBWBBWW", "BWBWBWBWWWBWWBWBWWBWWBBWBBWWWWWBWWBBWBWWBBBWBBBWBB", "BWWBBWBBBBBWWWBWWBWWBWBWBBBBBWWBBBWBWWBWWBBBBBBWWW", "BWWWBWWBBBWBBWWWBWBWBBBWWBBBWBBWBBWBWBBBWBBBWWBBBB", "WWBWBWWBBWWBBBWWWBWWWBWBWBBBBWBBWWBBBWBWWBBWBWBWWB", "BWWWWBWWBWWWWWBBBWWBWWBWWBBWBBWWBWWWWWWBBWWWWWWBWW", "WBWWBWBWWBWBBBWWBWBBWWBWWWWWBBBWWWWWWWWBWWBWBBWBWW", "BWBBWBWWWWWBWBBBBWBBBBBBWBWBBBWBWBWWBBWBBWBBWWBBWB", "BBBBBWWBWWWWWBWWWBBBBWBWWBBWBWBWBBWBBBWBBWWBBWWWWB", "BWBWBBWWBWBBWWBWWWBBBBBBBWBBWWWBWBWWBBBWWBBWWBWBBB", "BBBWWBWBBWWBBWBBBWBBWBBWWBBWWWWWWWWBBBWWWBBBWWBWWW", "WBBBBBWWWBWWWWBWBBWBWBWWWBWWBBWBBWBWWBBBBBWWBWWBBW", "BWWBBWBWBWWWWWBBWBWWBBWWBWWBBBWWBBBWBBWWBWBBBBBWWB", "WWWWBWBWWBBBWWBBWBWBWWBBBBBBWBBBBBBBBBWBWBBBWBWWWB", "WWBBBWBWWBWWBWBBWWWBWWWBWWWBBBBBBBWWBWBBBWWWWBWBWB", "WWWBBBWBBBWBWWWBBWBWBWBWWWBBBBBWBWBWWWWWBBBWWBWBWW", "BWBBBWBWWBWWWBWBWWWBBWWBBWBWWBBWWBWBBBWBWBWWBWWBBB", "WWWBBWBWWBBBBWBBBBWBWBWBBWWWWWBBBWWWBBWWBBBBBBBWWW", "WWBWBWWWBBBBWWBBWBWWWWWBBWBWBBWBWBWBWBBWBWWBWBWBWW", "BBWBWWBBWBBWBWWWWWBBWBWBBWBWWWWWBWBBWBBBBBWWWBBWWW", "BBBWWWBWWBBWBBWBBWWWBWWBBBWWWWWBBBBBWWWBWWBWBBWBBW", "WBWWBBWWBBWBWWBBWBWBWBBBBBBWBWBWWWWWBBWBBBWBBBWWWB", "WBBBWBBWBWWWBBWBBBBWBWWWBWWWWBBWWWBWBWBWBBWWBWBBBB", "BWWWWBWBBBBWBWBBWBBBWBWBWBWBBWWWBWWBWBWBBBBWWBBWBW", "BBWBWBWBBBWBBWWBWWWWBBWWBWBWWWBBWBBBBWBWBWWBWBBWBW", "WWWBWWWWBBBBBBBWBWWBWBWBBWBWWBWBWWWBBBWBBBWWBWWBBB", "WWWWWWBBWWWBWBWWBBBWWWWBWBWBBBWWBWBBBBBBWWWBWBWBWW", "WBBBBBBWWBWBBWWWWWBBWWWWBBBWBWBBBBWBWWBBBWBWBBWWWW", "BBWWBWWBWWBWBBWWBBBWWBWBWBWBBWBWBWBBBWBBBBWWBBBBBB", "BBWBWBBWBBWWBBBWBWBBBBWWBBBWWBBBWWBWBBWBBBWBBBBBBB", "WWWWWBWBBWWWBBWWWWWWBBWBWBBWBBBWWBWBWWWWWBWWWBBWWW", "WWWBBWWBWBBBBWWWBWBWWWBBBBBBBWWBWBWWWBWWWWWWBBWBWB", "BBWBWWWBWWWWWBBBBBBWBWBBWWWWBBWBBWBBBBWBWBBBWWBBWB", "BWBWWWWBBWBBBBWWWBBWWWWBBBWWWBBBBWWWWWWWBBWWWBWWBW", "WWWBWBBBWBWWBWWWWWWBWWWBWBWWBBWBWWBWWWBWBWBWBBBBBW", "WBWWBBWWWBWWWWWWWBBWWBBBBBWWWWWWWBWWWBBWBWWBWBBWBW", "BBWBWWWWBBWWBWWWBBWBWBBWBBBWBWWBWBWBBWWWWWBBWBWWWB", "BBBWBBWWBWWBWWBBWBWBBBWWWWBWBWBBBBBBBWWBBWWBBBWBWB", "WBBWWWBBBWBWWWWWBWWWWWWBBBWWWBBBWBWBWWBBBWWBBBWBWB", "BBBBWBWWWBWBWWWWBWWWBBBWWBWBWWWBBWBBWBWBBWBWWWBWBW", "BBBWWBWWWWBWWWBWBWBBBWWWBWBWBBBBWBBBBBWWBBBBWWBBBW", "BWBWBWBBBBBWBBBWWWWBBWWBWBBBWBBWWBWBWWWBWBBBBWBWWB", "WWBWBWWBBBWWBBWBBBWBBBWBBBBWWBWWWBWWWWWBWWBBWBWWBW", "WWWBBBWWWBBWBWBBWBWWWWBBWBWWWWBWBWBWBWWBBWBBWBWBWW", "WWWBWWWBWWWBBBWWBBBBBBBBWWBBBBBWWBBBWBBBBBBWWBWWWB", "BWBWWBBBWBBWBWWBBWBWWWWBBWBWBBBWWWWBBWBBBWWBBBWBBB", "BBWWWBWBWWBBWWBWBWBWBBWWWWBWBBBBBWBWBBWBWWWBBWBBBW", "BWWWBBWBWBBWBWBWBWWWBWBWBBBBWWBBWBBBBWBBBBWWBBWWBB", "WBBWBWWBBWWBWWBWWWWWWWWBBBBBWWWBBBBWBBWBWWBWBBWWWW", "BBBBBWWBWBBWBWWWWBBWWBBBBWBWWBBBBBBBBBWWWBBWWBBWBW"};

//	TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 139, 825);
}

void Test6()
{
	string test[]= {};
	//TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 3000, 0);
}

void Test7()
{
	string test[]= {"WBBWWBBBWWBWWBWWBWWWBBWBBWWBBWWWBBWWWBWWWBWBBBWBWW", "BWWWWBWBBBWWBBWWWWBBBBWBWBWWBWWBBBBWWBBBBBWBWBBBWW", "BBWWBBBWWWWBBWWWWWBWBBBBBWBWBWWWWBBWWBBBWBWBBBBWWW", "BWWWWWWWBBWWBWWBWWBWBWWBWBWBBWWWBWWBBBBBBBBBWWWBWW", "BWWBWBWWBBWBBBWWBBWWWBWBWBBWWWWWWBWWBWBWWBBBWBWWWB", "WWWWWWBBWBBBBWBBWBBWBWBWBWBBWBWBWWWBWBBBWWBWWBBBBB", "BBWWBBWBWBWWBBWBBBBWBWBWBBWBBWWWWWWWBBBWWWBBBBBWWB", "WWWWBBBBBBWWWWBBBBWBBBWWWBWBWBWWWWBBWWWBBWBBBBBWWB", "WBWWWWWWWBWWBWBWBBBBWBWBBBWBWWBWWWWBWWBWBWWBWBWBBW", "WBWBWWWBWWWBWWBBBWBWWWBBWWWWWBWBWWBBBBBBBBWWBBBWWB", "BBWWBWWWBWBBWWBBBWBWBBWBBBBWWBWBWBWBBWWBBWWBBBWWWB", "WWBBBBWWWWWBWWWBWBWBWWWWBWWWBWBWBWWWWWBBWWBWWBBWBB", "BWWWWBBBWBBWBBBBWWWWWWBBBWWWBBBWWBBBBWBBBWWBBWWWWB", "BBBBWBBWBWBWBBBBBWBBBBWBWBWWBWWBBBWBBWBWWBBBBWWBBB", "WBWWWWWWWWWWBWBWBWBWWWWBWBBWBBBBBWBBBBBBBWBWBWBWBB", "WWWBWWBWBWWBWWBWWBWBWWWBWWBWWBWWWWWBBWWWBBWBWBBBBW", "BBBWBWWBBBWBWWBBBBBWWWBBBBWWWBWBBWWBBWBWWBBWWBBBBB", "WWWWBBWBBBBWWBWWBWBBWBBBWBBWBWWBWBWWWWWWBBBBBWBWBB", "WWWBWWWWWBWBBWWBWWWWWBWWWWBWWWWBBWBBWWBWBWBWBBBWWB", "WBBBWBBWBBWBWBBBBBWBBBWBBBWWWWBWWWBBWWBBBBWBWWBBWW", "BWWWBBBBBWWBBWWBWWBWBBWBWBWBBBWBWWWBBWWBWBWWWBWBWW", "BBBBWBBWBWWBWBBBBWBWBBWBWBWBWWWBBWWWWBBBBWWBWBWBBW", "BBWBBWBBWBWBWBBWBWWBBBWBWWBBBWBBBWWWBWWBWWWBBWBBBW", "BWWBWBWBWWWBBBWBBBWBWBBBBBBWBBBWWWWWWBBBBBWBWBBWBB", "BBBWWBWWBBWBBWBBWBBWBWBWWBWWBWWBWWBWBWWWBWWBWWBWBB", "WWWWWBWWBWBBBWBBWBBWBWBBWWBBWWBWWBWWWWBBBBWBBWWWBB", "BWWWBBWWWBBWWBBWWBWWBWWWBBWWWWWBBWWBWBWWBWBWBBWWBW", "WBWBBBWWBBBBBBWWBWBWBWWWWWBBBWBBWBBBWWWBBBWBWWWBBB", "WBBWWWWWBWWBWBBWWBBWBBWWBWBWWBBWWWBWWWWBBWBWWBBBBB", "WWWWWWWBWBBBWWWBBWWWWWBBBBBWBBWBWWBBBBWWWWWWWBWBBB", "BBWBBBBBWWBBBWWBBWWWWWWWBBBBBWBBWBBBBBBWWBBWBWBBWW", "WBBWBWWBWWBBWBWWBBWWBWWBBWWBWBWWBBBBBBBBBBWWWWBWBB", "WBBWBWBWBWBBBWBBBBWWWBBWWBBWBWWWWBBWWBWBBWBWWWBWBW", "BBBBBBWBBWWBWWBBWBWBWBWBWWBBWWBWBWWWBBBBWBWWBWWWWW", "WWWBWBBWBWBBWBWBWBBWWBBBWWWBBWWBWWBBBWWWWWBBBWWWBB", "BBBWBWBWBBWWBBBBBBBBWBWBWWBBBWBBBWWWWWWWBBWWWWWWWB", "BWWWBBBWWBWBBBWBBWBBWBBWWWWWBBBBWWBBBBBBBBBBWWBBWB", "WWBBBWWBBWBWWWBBBWBBBWBBWBWWWBWBWWBBBBWWWBBWWBBBWB", "WWBWBBBBWBBBWBWBWBWWWWBBWWWWWWBWBBBBBWBBWWWWWWWBWB", "WWWBBWBBBBBBWBBWBWBWBBWWBWWWWBBWBBBBBBBBBWWWBBWBWW", "WBWBWWBWWWBBWWWBBWWWBWWBBWWWWBWBBBBWWBWWBWBBWWWBWW", "WBWWBBBWBBBBBWWWWBBBWWBWBBBWBWBWWBWWWWWBWWBWWWBWWW", "BBWWBBBWWWWWWWWBBBWWWBBWBWWWBWWBWBWWWWBBWBBWWWWBWW", "WWBWWWWBWWWWBBWBBWBWWBWWWBBBBWBWWWBWBWWWWWWBWBBWWW", "BBWBWWBBWBWWWWBBWWBWBWWWBWBBBWWWBWBWBBBWWBBWWBWBWB", "WWBBBWBWBWBBBBBBWBWBBBWBBWWBBBBWBBBBBWWBWBWBWWWWWW", "BWBWWBBWBWBWBBBWBBBWWWBWWBBWWWWWBBBWBWWBBBBWBBWWWW", "WWWBBBBWBWBBBWWBWBBBBWBBBBWBBBBBBBWBBWWWBBWWBBBWWB", "BBBBBWWBBWBBWWBWWWBBBWBBBWBBBBWWWBBBWBBWWWWWBWWWWW", "WBWBBWBBWWWBWWBWWBWBWBBBWWWBBBWWWBWBWBWBWBBBBBBWWB"};
	TEST(convertEx(test, SIZEOFSTRINGARRAY(test)), 145, 777);
}

int main()
{
	Test1();
	Test2();
	Test3();
	Test4();
	Test5();
	Test6();
	Test7();
	cout<<"success";

	getchar();
	return 0;
}
