#include <iostream>
#include <cstdio>
#include <vector>
#include <cassert>
#include <sstream>
#include <set>
#include <unordered_map>
#include <map>
#include <algorithm>
#include <time.h>
#include <stdlib.h>
#include <queue>
using namespace std;
/* http://community.topcoder.com/stat?c=problem_statement&pm=13918*/
#define SIZEOFARRAY(s) sizeof(s)/sizeof(s[0])
#define REP(i,n) for(int i=0;i<(n);++i)
#define LOOP(i,v,n) for(i=v;i<(n);++i)
#define LL long long
#define memSet(m, v) memset(m, v, sizeof(m))


class ABBA
{
public:
    string canObtain(string initial, string target)
    {
        while (target.length() > initial.length()) {
            if (target.back() == 'A')
                target.pop_back();
            else if (target.back() == 'B')
            {
                target.pop_back();
                reverse(target.begin(), target.end());
            }
        }
        
        return target == initial ? "POSSIBLE" : "IMPOSSIBLE";
    }
};

void TEST(string initial, string target, string expected)
{
    clock_t start, end;
    double cpu_time_used;
    
    start = clock();
    ABBA aBBA;
    string result = aBBA.canObtain(initial, target);
    
    assert( result == expected );
    
    end = clock();
    cpu_time_used = ((double) (end - start));
    cout<<"Time taken : "<<cpu_time_used<<endl;
}

template <class T>
vector<T> convert(T *list, int n)
{
    vector<T> ret;
    
    for (int i = 0; i< n; ++i)
    {
        ret.push_back(list[i]);
    }
    
    return ret;
}

void Test1()
{
    TEST("B", "ABBA", "POSSIBLE");
    TEST("AB", "ABB", "IMPOSSIBLE");
    TEST("BBAB", "ABABABABB", "IMPOSSIBLE");
    TEST("BBBBABABBBBBBA", "BBBBABABBABBBBBBABABBBBBBBBABAABBBAA", "POSSIBLE");
    TEST("A", "BB", "IMPOSSIBLE");
    TEST("BABABBABBBBBBABABBBBBBABBBBABBABABBAABBBBBBAAAAABBBBBAAAAABBBBABBABBBAABABAAABAABABABAABABAABBBBBBABAAAABBBABAABAAABAAAAAABBAABAAAAABBABBBBBABAABBBAABABAABAABABABBABABBAABAABBAABAAAAABABBAABAABAAAAAAAABAAAAABBBBAABAABABBABAABBABABBABAABABBABBAABAAABBBBBBBABBBAABAABAAAABBAAABAAAABABABABAABBAAABAABBAAAABABABABBAABAABBBBBBAAABAAABBBBBABBBBAABBAAAAABBAABBAABBBBBBBAAABAABBAAABBBAABABAAABABAABBBAABBABAABBBBBBBABABAAABBBAABABAABABBBBBBBBBAAABABAABBBBABBABABBAAAABBABBBAABBABBABABBAAABAABABBAABABABBABBBBAABAABBABBBBBBBBBAABAABAAABBBBAAAAAABAAABAB",

    TEST("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",

}

void Test2()
{
}

void Test3()
{
}

void Test4()
{
}

void Test5()
{
}

void Test6()
{
}

void Test7()
{
}

void Test8()
{
    
}

void Test9()
{
    
}

void Test10()
{
    
}

int main()
{
    Test1();
    Test2();
    Test3();
    Test4();
    Test5();
    Test6();
    Test7();
    Test8();
    Test9();
    Test10();
    cout<<"success";
    return 0;
}
