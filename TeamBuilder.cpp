#include <iostream>
#include <cstdio>
#include <vector>
#include <cassert>
#include <sstream>
#include <set>
#include <unordered_map>
#include <map>
#include <algorithm>
#include <time.h>
#include <queue>
using namespace std;
#define SIZEOFARRAY(s) sizeof(s)/sizeof(s[0])

/* https://www.topcoder.com/stat?c=problem_statement&pm=2356&rd=4740 */

class TeamBuilder
{
public:
	vector<int> specialLocations(vector<string> paths);
};

vector<int> TeamBuilder::specialLocations(vector<string> paths)
{
	vector<int> ret(2);
	size_t len = paths.size();
	vector< vector<int> > tc(len, vector<int> (len) );

	for (size_t i = 0; i < len; ++i)
	{
		for (size_t j = 0; j < len; ++j)
		{
			tc[i][j] = paths[i][j] - '0' > 0 || i == j;
		}
	}

	for (size_t k = 0; k < len; ++k)
	{
		for (size_t i = 0; i < len; ++i)
		{
			if (i != k && tc[i][k])
				for (size_t j = 0; j < len; ++j)
				{
					if (i != j && k != j && tc[k][j])
						tc[i][j] = 1;
				}
		}
	}

	for (size_t i = 0; i < len; ++i)
	{
		bool flag = true;
		for (size_t j = 0; j < len; ++j)
		{
			if (!tc[i][j])
			{
				flag = false;
				break;
			}
		}
		if (flag)
			++ret[0];
	}

	for (size_t i = 0; i < len; ++i)
	{
		bool flag = true;
		for (size_t j = 0; j < len; ++j)
		{
			if (!tc[j][i])
			{
				flag = false;
				break;
			}
		}
		if (flag)
			++ret[1];
	}
	return ret;
}

void TEST(vector<string> paths, vector<int> expected)
{
	clock_t start, end;
	double cpu_time_used;

	start = clock();
	TeamBuilder teamBuilder;

	vector<int> result = teamBuilder.specialLocations(paths);
	
	assert( result.size() == expected.size() &&
			std::equal(result.begin(), result.end(),
			expected.begin()) );

	end = clock();
	cpu_time_used = ((double) (end - start));
	cout<<"Time taken : "<<cpu_time_used<<endl;
}

vector< vector<int> > convert(string *list, int n)
{
	vector< vector<int> > ret(n, vector<int> (n));

	for (int i = 0; i< n; ++i)
	{
		string str = list[i];

		for (int j = 0, len = str.length(); j < len; ++j) {
			istringstream iss(str.substr(j,1));

			iss >> ret[i][j];
		}
	}

	return ret;
}

template <class T>
vector<T> convertEx(T *list, int n)
{
	vector<T> ret;

	for (int i = 0; i< n; ++i)
	{
		ret.push_back(list[i]);
	}

	return ret;
}

void Test1()
{
	string test[] = {"010","000","110"};
	int result[] = { 1,  1 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test2()
{
	string test[] = {"0110000","1000100","0000001","0010000","0110000","1000010","0001000"};
	int result[] = { 1,  3 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test3()
{
	string test[] = {"0010","1000","1100","1000"};
	int result[] = { 1,  3 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test4()
{
	string test[] = {"01000","00100","00010","00001","10000"};
	int result[] = { 5,  5 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test5()
{
	string test[] = {};
	int result[] = { 0, 0 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test6()
{
	string test[] = {};
	int result[] = { 50,  50 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

void Test7()
{
	string test[] = {"0000000000000000000000000000000000000000000000", "0000101000000001000000010000000000000000001000", "0000100000000000100000100100000000001000000010", "0000000010000100000000000000000000010000100000", "0000000000001000000000000000000010001000100000", "0000000000000000100010000010000000000000100000", "0000000010000011001000000000000000000000000000", "0001000000000000000000010000000000000000000000", "0000000000000000000000100000000000010000000000", "0000000000000000001000001000000000000000000000", "1000000000000000100000000100001001000000100000", "0000000000000010000000000000110000000000010000", "0010000000000000110001000000000000000010000100", "0000000000000000001000001000000000010000000000", "0100000000000100000000000000110010000000000010", "0000000000000000000000001000000010000000000000", "0100000100000000000010000000000000000000001100", "0000000000010000100010000000010000010100000000", "0000000000001000000010000000000010100100001000", "0000000100100000000000000000100000000001011000", "0000000100000100000000100000000000000000000100", "0000000000000000000000000001000000100000000000", "0000100000000000000000000000000001110000000010", "0000000000000010000000000000000000001000000000", "0000000000001000000100000000000000000000000000", "0000000000000000000000000010001010010000000000", "0000000000000001000000000001000000000000000100", "0000000001000010010000000000000000000000001000", "0000000000000000001100000000000001000000000000", "0000100000000000000000000000000000000000010000", "0000000010001000000000000000000000000000000000", "0000001000000000000001001000000001000000000000", "1100010000000001000101000000000000000000000100", "0000000001000000000000100000000000000000000000", "0000000000100011000100000000010000001000000000", "0010000000000000000000000010000000000100000000", "0000000000000000001000010000000000010000010010", "0000000000000000110100000000000000000000000001", "1000000010000000100000010000000001000000000000", "0001000000100000010000000000010001000000000001", "0000000000000000000000000010000100010001000000", "0000010000000000000010000000000000000000000000", "0000000000100000010000000000000001000100000000", "0000001000000001000000000000000000000000001000", "0000001000000001000001000000000000000000001000", "0000000100000000000000000000100001000000100000"};
	int result[] = { 45,  1 };
	TEST(convertEx(test, SIZEOFARRAY(test)), convertEx(result, SIZEOFARRAY(result)));
}

int main()
{
	Test1();
	Test2();
	Test3();
	Test4();
	Test5();
	Test6();
	Test7();
	cout<<"success";

	getchar();
	return 0;
}
